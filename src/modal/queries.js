const limt = '100';
const addOnQueries = {
    pymtmethods: "SELECT `id`, `method` AS value FROM `pymt_methods`;",
    notefolders: "SELECT `id`, `folder` AS value FROM `folders`;",
    SELECTBanks: "SELECT `id`, `bank_name` AS value FROM `bank`;",
    editEmployee: "SELECT * FROM employee WHERE id = ?;",
    deleteNote: "DELETE FROM notes WHERE id = ?;",
    deletePymt: "DELETE FROM payments WHERE id = ?;",
    deleteExp: "DELETE FROM expense WHERE id = ?;",
    deleteEmp: "DELETE FROM employee WHERE id = ?;",
    usersList: "SELECT `name`, `username` FROM `users` WHERE `is_active` = 'yes' ORDER BY `id` ASC;",
    delUser: "DELETE FROM users WHERE id = ?;",
    deleteStock: "DELETE FROM `stock` WHERE `id` = ? AND `purch_id` IS NULL;",
    editStock: "SELECT * FROM stock WHERE id = ?;",
    editParty: "SELECT * FROM party WHERE id = ?;",
    editPymt: "SELECT * FROM payments WHERE id = ?;",
    editBank: "SELECT * FROM bank WHERE id = ?;",
    soldItems: "SELECT * FROM sold WHERE order_id = ?;",
    empData: "SELECT * FROM employee",
    sendEmail: "SELECT p.party_name, p.email, o.order_id FROM orders o JOIN party p ON o.party = p.id WHERE o.id = ?;",
    setAsWholesale: "UPDATE orders SET category = 'WS' WHERE id = ?;",
    pymtsbydate: "SELECT y.id, p.party_name, y.amount AS payment, y.cash, y.bank, y.bank_mode, b.bank_name AS account, pm.method AS pymt_method FROM pymtfyear y LEFT JOIN bank b ON b.id = y.bank_id LEFT JOIN pymt_methods pm ON pm.id = y.pymt_method LEFT JOIN party p ON p.id = y.party WHERE pymt_date = ? AND y.purch_id is null ORDER BY id ASC;",
    ordersbydate: "SELECT o.id, p.party_name, o.inv_number AS inv_no, o.subtotal, o.totaltax AS gst, o.discount, o.freight, o.alltotal AS total, y.amount AS pymt, o.category, u.username, DATE_FORMAT(o.timestamp, '%d/%m/%Y, %r') AS timestamp FROM orders o LEFT JOIN party p ON p.id = o.party JOIN users u ON u.id = o.user_id LEFT JOIN pymtfyear y ON y.order_id = o.id WHERE o.order_date = ?;",
    retailorders: "SELECT o.inv_number AS inv_no, p.party_name, l.sku, l.product, l.pcode, l.size, l.qty, l.mrp AS price, l.disc, l.gst, l.tax, l.net, l.gross FROM sold l JOIN orders o ON o.id = l.order_id JOIN party p ON p.id = o.party WHERE o.order_date = ? and l.qty > 0  AND o.category IS NULL OR o.category = '';",
    wsaleorders: "SELECT o.inv_number AS inv_no, p.party_name, l.sku, l.product, l.pcode, l.size, l.qty, l.mrp AS price, l.disc, l.gst, l.tax, l.net, l.gross FROM sold l JOIN orders o ON o.id = l.order_id JOIN party p ON p.id = o.party WHERE o.order_date = ? and l.qty > 0 AND o.category IS NOT NULL OR o.category = 'WS';",
    grbydate: "SELECT o.inv_number AS inv_no, p.party_name, l.sku, l.product, l.pcode, l.size, l.qty, l.mrp AS price, l.disc, l.gst, l.tax, l.net, l.gross FROM sold l JOIN orders o ON o.id = l.order_id JOIN party p ON p.id = o.party WHERE o.order_date = ? and o.category is NOT NULL;",
    otherorders: "SELECT o.id, p.party_name, o.inv_number AS inv_no, o.subtotal, o.totaltax AS gst, o.discount, o.freight, o.alltotal AS total, u.username, DATE_FORMAT(o.timestamp, '%d/%m/%Y, %r') AS timestamp FROM orders o LEFT JOIN party p ON p.id = o.party JOIN users u ON u.id = o.user_id WHERE o.order_date = ? and o.category is NOT NULL;",
    expensebydate: "SELECT `id`, `description`, `amount`, `pymt_mode`, `bank_mode`, `exp_type` FROM expense WHERE date = ?;",
    stockbydate: "SELECT sku, product, pcode, qty, size, COALESCE(mrp, price) AS price, cost, category FROM stock WHERE DATE_FORMAT(timestamp, '%Y-%m-%d') = ?;",
    purchbydate: "SELECT u.id, p.party_name AS supplier, u.order_number AS order_no, u.quantity AS qty, u.sub_total AS subtotal, u.discount, u.tax_amount AS gst, u.freight, u.bill_amount AS total FROM purchase u LEFT JOIN party p ON p.id = u.supid WHERE u.order_date = ? and u.bill_type = 'purchase';",
    soldbydate: "SELECT o.inv_number AS inv_no, p.party_name, l.sku, l.product, l.pcode, l.size, l.qty, l.mrp AS price, l.disc, l.gst, l.tax, l.net, l.gross FROM sold l JOIN orders o ON o.id = l.order_id JOIN party p ON p.id = o.party WHERE o.order_date = ? and l.qty > 0;",
    grbydate: "SELECT o.inv_number AS inv_no, p.party_name, l.sku, l.product, l.pcode, l.size, l.qty, l.mrp AS price, l.disc, l.gst, l.tax, l.net, l.gross FROM sold l JOIN orders o ON o.id = l.order_id JOIN party p ON p.id = o.party WHERE o.order_date = ? and l.qty < 0;",
    empadvbydate: "SELECT ea.id, DATE_FORMAT(ea.pymt_date, '%d/%m/%Y') AS pymt_date, e.emp_name, e.emp_id, ea.amount, ea.pymt_mode, ea.purpose FROM emp_advance ea JOIN employee e ON e.id = ea.emp_id WHERE ea.pymt_date = ?;",
    suppymtbydate: "SELECT y.id, y.amount AS payment, y.cash, y.bank, y.bank_mode, b.bank_name, m.method, u.order_number AS po_num FROM pymtfyear y JOIN party p ON p.id = y.party LEFT JOIN bank b ON b.id = y.bank_id LEFT JOIN pymt_methods m ON m.id = y.pymt_method LEFT JOIN purchase u ON u.id = y.purch_id WHERE y.pymt_date = ? and y.pymt_for = 'purchase';",
    srchordersbyparty: "SELECT * FROM ( SELECT o.`id`, DATE_FORMAT(o.`order_date`, '%d/%m/%Y') AS `dated`, DATE_FORMAT(o.`order_date`, '%Y-%m-%d') AS `order_date`, p.`party_name`, o.`party`, p.`party_id`, o.`inv_number`, o.`order_type`, qs.`qty_sold` AS `qty`, o.`subtotal`, o.`discount`, o.`totaltax` AS `tax`, o.`freight`, o.`alltotal` AS `total`, o.`manual_tax`, py.`pymt`, o.`adjustment`, o.`round_off`, o.`alltotal` - ( COALESCE(py.`pymt`, 0) + COALESCE(o.`adjustment`, 0) ) AS `balance`, o.`fin_year`, o.`category`, o.`location`, o.`disc_id`, o.`disc_percent`, o.`rewards`, o.`redeem`, o.`notes`, o.`ship_id`, o.`tax_type`, o.`gst_type`, o.`previous_due`, MONTH(o.`order_date`) AS `month`, YEAR(o.`order_date`) AS `year`, u.`username` AS `biller`, o.`order_id`, o.`timestamp` FROM `orders` o LEFT JOIN `party` p ON o.`party` = p.`id` LEFT JOIN ( SELECT `order_id`, SUM(`qty`) as `qty_sold` FROM `sold` GROUP BY `order_id` ) qs ON qs.`order_id` = o.`id` LEFT JOIN ( SELECT sum(`amount`) `pymt`, `order_id` FROM `payments` GROUP BY `order_id` ) py ON o.`id` = py.`order_id` LEFT JOIN `users` u ON o.`user_id` = u.`id` ) x WHERE (x.`party_name` LIKE 'search' OR x.`year` LIKE 'search' OR x.`fin_year` LIKE 'search' OR x.`dated` LIKE 'search' OR x.`biller` LIKE 'search' OR x.order_type LIKE 'search' OR x.id LIKE 'search') ORDER BY x.`order_date` DESC, x.`id` DESC limit 50;",
    srchparty: "SELECT p.`id`, p.`party_name` AS `name`, p.`party_id`, p.`contact`, o.`cnt` AS `orders`, p.`opening_bal` AS `opening`, o.`billing`, y.`pymt` AS `payments`, ( coalesce(o.`billing`, 0) - coalesce(y.`pymt`, 0) ) + coalesce(p.`opening_bal`) AS `dues` FROM `party` p left JOIN ( SELECT count(`party`) `cnt`, SUM(`alltotal`) `billing`, `party` FROM `orders` group by `party` ) o ON o.`party` = p.`id` left JOIN ( SELECT `party`, SUM(`amount`) `pymt` FROM `pymtfyear` group by `party` ) y ON y.`party` = p.id WHERE p.`party_type` <> 'supplier' AND (p.`party_name` LIKE 'search' or p.contact LIKE 'search' or p.email LIKE 'search') order by p.`id` DESC limit 20;",
    srchsup: "SELECT * FROM party WHERE party_type = 'supplier' AND (party_name LIKE 'search' OR contact LIKE 'search') ORDER BY id DESC;",
    srchstock: "SELECT s.`id`, s.`sku`, s.`product`, s.`pcode`, s.`mrp` AS `price`, s.`gst` AS `tax`, s.`size`, s.`discount` AS `disc`, s.`disc_type`, s.`brand`, s.`colour`, s.`label`, s.`section` AS `sec`, s.`season` AS `sea`, s.`category` AS `cat`, s.`upc`, s.`hsn`, u.`order_number` AS `po#`, coalesce( date_format(u.`bill_date`, '%d-%m-%Y'), date_format(s.`purch_date`, '%d-%m-%Y') ) AS `purch_on`, p.`party_name` AS `supplier`, s.`ean`, s.`cost`, s.`qty`, ds.`dqty` AS `ds`, s.`updated_qty` AS `luq`, l.`sold`, sr.`gr`, s.`qty` - coalesce(ds.`dqty`, 0) - ( ifnull(l.`sold`, 0) + ifnull(sr.`gr`, 0) ) `avl`, s.`purch_id` AS `puid`, s.`image` FROM `stock` s left JOIN ( SELECT s.`sku`, SUM(s.`qty`) `sold` FROM `sold` s left JOIN `orders` o ON s.`order_id` = o.`id` WHERE o.`entity` = 1 group by s.`sku` ) l ON s.`sku` = l.`sku` left JOIN ( SELECT `sku`, SUM(`qty`) AS `gr` FROM `stockreturn` group by `sku` ) sr ON s.`sku` = sr.`sku` left JOIN ( SELECT `sku`, SUM(`qty`) AS `dqty` FROM `defective_stock` WHERE `dnote_id` is null GROUP BY `sku` ) ds ON s.`sku` = ds.`sku` left JOIN `purchase` u ON u.`id` = s.`purch_id` left JOIN `party` p ON p.`id` = u.`supid` WHERE (s.`product` LIKE 'search' or s.`pcode` LIKE 'search' or s.`category` LIKE 'search' or s.`sku` LIKE 'search') order by s.`id` DESC limit 300;",
    srch_stock: "SELECT `id`, `sku`, `hsn`, `product`, `pcode`, `size`, `unit`, `mrp`, `price`, `discount` as `disc`, `gst`, `available`, `brand`, `category`, `colour`, `disc_type`, `label`, `section`, `season`, `sold` FROM `viewstock`  WHERE (`product` LIKE 'search' or `pcode` LIKE 'search' or `category` LIKE 'search' or `sku` LIKE 'search') order by `product` ASC limit 50;;",
    srchpurchase: "SELECT `id`, date_format(`bill_date`, '%d/%m/%Y') AS `dated`, `order_number` AS `num#`, `supplier`, `bill_type` AS `type`, `bill_number` AS `inv#`, `qty`, `s_total`, `disc`, `tax`, `freight`, `total`, `pymt`, `fy`, `supid`, `ref_filename`, `bdate` FROM ( SELECT u.`id`, u.`order_number`, u.`bill_date`, p.`party_name` AS `supplier`, u.`supid`, u.`bill_type`, u.`bill_number`, u.`quantity` AS `qty`, u.`sub_total` AS `s_total`, u.`discount` AS `disc`, u.`tax_amount` AS `tax`, u.`freight`, u.`bill_amount` AS `total`, y.`pymt`, u.`fin_year` AS fy, u.`ref_filename`, u.`bill_date` AS `bdate` FROM `purchase` u left JOIN `party` p ON p.id = u.`supid` left JOIN ( SELECT `purch_id`, SUM(`amount`) AS `pymt` FROM `pymtfyear` WHERE `pymt_for` = 'purchase' group by `purch_id` ) y ON y.`purch_id` = u.`id` WHERE u.`entity` = 1 UNION SELECT y.`id`, null AS `order_number`, y.`pymt_date`, p.`party_name` AS `supplier`, y.`party` AS supid, 'payment' AS `bill_type`, null AS `bill_number`, null AS `qty`, null AS `s_total`, y.`adjustment` AS `disc`, null AS `tax`, null AS `freight`, null AS `total`, y.amount AS `pymt`, y.`fin_year` AS `fy`, null AS `ref_filename`, y.`pymt_date` AS `bdate` FROM `pymtfyear` y left JOIN `party` p ON p.id = y.`party` WHERE y.`pymt_for` = 'purchase' and y.`purch_id` is null ) x WHERE x.`supplier` LIKE 'search' order by x.`bill_date` desc, x.`id` DESC limit 50;",
    srchpymts: "SELECT y.`id`, date_format(y.`pymt_date`, '%d/%m/%Y') AS `dated`, p.`party_name` AS `party`, p.`id` AS `party_id`, y.`amount`, y.`cash`, y.`bank`, y.`bank_mode` `mode`, py.`method`, b.`bank_name` AS `account`, y.`adjustment` `adj`, y.`order_id`, y.`purch_id`, y.`pymt_for`, y.`notes` FROM `pymtfyear` y left JOIN `party` p ON p.`id` = y.`party` left JOIN `bank` b ON b.`id` = y.`bank_id` left JOIN `pymt_methods` py ON py.`id` = y.`pymt_method` WHERE (p.party_name LIKE 'search' or p.contact LIKE 'search') order by y.`pymt_date` desc, y.`id` DESC limit 100;",
    srchsold: "SELECT l.`id`, date_format(o.`order_date`, '%d/%m/%Y') AS `dated`, l.`order_id`, o.`inv_number`, p.`party_name`, l.`sku`, COALESCE(l.`hsn`, s.`hsn`) AS `hsn`, COALESCE(l.`category`, s.`category`) AS `category`, l.`pcode`, l.`product`, l.`size`, l.`unit`, l.`qty`, l.`price`, l.`disc`, l.`disc_val`, l.`disc_per`, l.`gst`, l.`tax`, l.`net`, l.`gross`, l.`emp_id`, e.`emp_name` FROM `sold` l LEFT JOIN `orders` o ON l.`order_id` = o.`id` LEFT JOIN `party` p ON o.`party` = p.`id` LEFT JOIN `stock` s ON l.`sku` = s.`sku` LEFT JOIN `employee` e ON e.`id` = l.`emp_id` WHERE (l.sku LIKE 'search' or l.product LIKE 'search' or l.pcode LIKE 'search' or p.party_name LIKE 'search' or p.contact LIKE 'search' OR l.hsn LIKE 'search'  OR s.hsn LIKE 'search' OR l.category LIKE 'search'  OR s.category LIKE 'search') ORDER BY o.`id` DESC;",
    srchexpense: "SELECT e.`id`, date_format(e.`date`, '%d/%m/%Y') AS `date`, e.`amount`, e.`description`, e.`pymt_mode` AS `via`, e.`bank_mode` AS `mode`, py.`method`, b.`bank_name` AS `bank`, e.`exp_type` AS `type`, SUM(e.`amount`) OVER ( PARTITION BY MONTH(e.date) ORDER BY `date`, `id` ) AS `total` FROM `expense` e left JOIN `bank` b ON b.`id` = e.`bank_id` left JOIN `users` u ON u.`id` = e.`user_id` left JOIN `pymt_methods` py ON e.`pymt_method` = py.`id` WHERE( e.`description` LIKE 'search' OR e.`amount` LIKE 'search') order by e.`date` desc, e.`id` asc;",
    srchnotes: "SELECT n.`id`, coalesce(f.folder, '') AS folder, n.`details`, n.`status`, date_format(n.`timestamp`, '%d-%m-%Y, %r') `timestamp` FROM `notes`n left JOIN folders f ON f.id = n.folder_id WHERE n.details LIKE 'search' order by n.`id` desc;",
    srchemp: "SELECT `id`, `emp_name` AS `name`, `emp_id`, `contact`, `exprience` AS `exp`, `education` AS `edu`, `gender`, date_format(`birthday`, '%d/%m/%Y') AS `dob`, date_format(`joining`, '%d/%m/%Y') AS `doj`, `bg`, `deg`, `ecd`, `address`, `hometown` AS `ht`, `father`, `mother`, `ref`, `department` AS `dep`, `lwd`, `status` FROM `employee` WHERE (`emp_name` LIKE 'search' or `contact` LIKE 'search' or `emp_id` LIKE 'search') order by `emp_name` asc;",
    editorderdate: "UPDATE orders SET order_date = ? WHERE  id = ?;",
    editinvno: "UPDATE orders SET inv_number = ? WHERE id = ?;",
    deleteorder: "delete FROM orders WHERE id = ?;",
    chkorderpymt: "SELECT o.alltotal AS total, y.pymt FROM orders o left JOIN (SELECT order_id, SUM(amount) AS pymt FROM payments WHERE order_id = ? group by order_id) y ON o.id = y.order_id WHERE o.id = ?;",
    banksList: "SELECT id, bank_name FROM bank order by id;",
    listofBanks: "SELECT id, bank_name AS value FROM bank order by id;",

    listpymtmethods: "SELECT id, method FROM pymt_methods order by id;",
    pymtmethodslist: "SELECT id, method AS value, default_bank FROM pymt_methods order by id;",
    defaultbank: "SELECT default_bank FROM settings;",
    vieworderpymts: "SELECT y.id, y.amount AS payment, y.cash, y.bank, y.bank_mode AS `mode`, m.method, b.bank_name AS account, y.notes FROM pymtfyear y left JOIN bank b ON b.id = y.bank_id left JOIN pymt_methods m ON m.id = y.pymt_method WHERE y.order_id = ?;",
    vieworderitems: "SELECT `id`, `sku`, `product`, `pcode`, `size`, `qty`, coalesce(`price`,`mrp`) as `price`, `disc`, `net`, `gross` FROM `sold` WHERE `order_id` = ?;",
    getActiveEntity: "SELECT * FROM entity WHERE status = true;",
    getorderids: "SELECT id, order_id FROM orders WHERE order_id=? OR id = ?;",
    bankStmt: "",
    listBanks: "SELECT id, bank_name AS bank, account_type AS type, account_holder AS holder, account_number, ifscode FROM bank;",
    empSales: "SELECT DATE_FORMAT(o.order_date, '%d/%m/%Y') AS dated, l.sku, l.product, l.size, l.qty, l.mrp AS price, l.disc, l.gross AS sale FROM sold l JOIN orders o ON l.order_id = o.id WHERE l.emp_id = ? AND MONTH(o.order_date) = ? AND YEAR(o.order_date) = ?;",
    userEmail: "SELECT email, email_verified FROM clients WHERE id = ?;",
    updateUserPwd: "UPDATE users SET password = md5(?) WHERE user_id = ? AND password = md5(?);",
    appusers_: "SELECT id, name, username FROM users WHERE user_role = 'user';",
    appusers: "SELECT id, name, username FROM users ORDER BY id;",
    editUser: "SELECT id, name, username, contact, email FROM users WHERE id = ?;",
    userRestrictions: "SELECT * FROM restrictions WHERE userid = ?;",
    // updateUserPwd: "UPDATE users SET password = MD5(?) WHERE id = ?;",
    countPartys: "SELECT party_type, COUNT(id) AS partys FROM party GROUP BY party_type;",
    partyToJson: "SELECT * FROM party ORDER BY id ASC;",
    contactExist: 'SELECT id, party_name FROM party WHERE contact = ?;',
    suppliers: "SELECT * FROM party WHERE party_type = 'supplier'",
    deleteParty: "DELETE p FROM party p LEFT JOIN orders o ON o.party = p.id LEFT JOIN payments y ON y.party = p.id LEFT JOIN purchase u ON u.supid = p.id WHERE p.id = ? AND o.party IS NULL AND y.party IS NULL AND u.supid IS NULL;",
    nextsku: "SELECT id + 1001 AS newsku FROM stock ORDER BY id DESC LIMIT 1;",
    srchParty: "SELECT id, party_name AS party, party_id, contact FROM party WHERE party_type <> 'supplier' AND (party_name LIKE 'search' OR contact LIKE 'search') LIMIT 10;",
    srchSupplier: "SELECT id, party_name AS party, contact FROM party WHERE party_type = 'supplier' AND (party_name LIKE 'search' OR contact LIKE 'search') LIMIT 10;",
    srchPartyByPartyId: "SELECT id, party_name AS party, party_id, contact FROM party WHERE party_id = ?;",
    loadMoreOrders: "SELECT o.`id`, DATE_FORMAT(o.`order_date`, '%d/%m/%Y') AS `dated`, DATE_FORMAT(o.`order_date`, '%Y-%m-%d') AS `order_date`, p.`party_name`, o.`party`, p.`party_id`, o.`inv_number`, o.`order_type`, qs.`qty_sold` AS `qty`, o.`subtotal`, o.`discount`, o.`totaltax` AS `tax`, o.`freight`, o.`alltotal` AS `total`, o.`manual_tax`, py.`pymt`, o.`adjustment`, o.`round_off`, o.`alltotal` - ( COALESCE(py.`pymt`, 0) + COALESCE(o.`adjustment`, 0) ) AS `balance`, o.`fin_year`, o.`category`, o.`location`, o.`disc_id`, o.`disc_percent`, o.`rewards`, o.`redeem`, o.`notes`, o.`ship_id`, o.`tax_type`, o.`gst_type`, o.`previous_due`, MONTH(o.`order_date`) AS `month`, YEAR(o.`order_date`) AS `year`, u.`username` AS `biller`, o.`order_id`, o.`timestamp`, o.`order_id` FROM `orders` o LEFT JOIN `party` p ON o.`party` = p.`id` LEFT JOIN ( SELECT `order_id`, SUM(`qty`) as `qty_sold` FROM `sold` GROUP BY `order_id` ) qs ON qs.`order_id` = o.`id` LEFT JOIN ( SELECT SUM(`amount`) `pymt`, `order_id` FROM `payments` GROUP BY `order_id` ) py ON o.`id` = py.`order_id` LEFT JOIN `users` u ON o.`user_id` = u.`id` WHERE o.`id` < ? ORDER BY o.`order_date` DESC, o.`id` DESC LIMIT 100;",
    billNumber: "SELECT `id`, `inv_number`, MAX(`order_date`) `order_date` FROM `orders` WHERE `order_type` IN ('invoice', 'taxinvoice', 'refund') GROUP BY `id`, `inv_number` ORDER BY `id` DESC LIMIT 1;",
    otherBillNumber: "SELECT `id`, `inv_number`, MAX(`order_date`) `order_date` FROM `orders` WHERE `order_type` = ? GROUP BY `id`, `inv_number` ORDER BY `id` DESC LIMIT 1;",
    searchProduct: "SELECT `id`, `sku`, `product`, `pcode`, `size`, `hsn`, `avl_qty` AS `avl`, `mrp` AS `price` FROM `stock_view` WHERE (`product` LIKE 'search' OR `pcode` LIKE 'search' OR `sku` LIKE 'search' OR `hsn` LIKE 'search') ORDER BY `product` LIMIT 25;",
    srchProduct: "SELECT s.`id`, s.`sku`, s.`hsn`, s.`product`, s.`pcode`, s.`unit`, COALESCE(s.`price`, s.`mrp`, s.`wsp`) AS `price`, s.`gst`, s.`size`, NULL AS `disc`, s.`sold`, s.`available` AS `avl`, 1 AS qty, CASE WHEN s.`disc_type` = '%' THEN s.`discount` ELSE NULL END AS `disc_per`, CASE WHEN s.`disc_type` IS NULL THEN s.`discount` ELSE NULL END AS `disc_val`, NULL AS `emp_id`, s.`season`, s.`section`, s.`category`, s.`colour`, s.`ean`, s.`brand`, s.`image`, coalesce(s.`sold`, 0) AS `sold` FROM `viewstock` s WHERE s.`available` > 0 AND (s.`product` LIKE 'search' OR s.`pcode` LIKE 'search' OR s.`sku` LIKE 'search' OR s.`hsn` LIKE 'search' OR s.`supplier` LIKE 'search' OR s.`category` LIKE 'search' OR s.`section` LIKE 'search' OR s.`season` LIKE 'search' OR s.`ean` LIKE 'search' OR s.`colour` LIKE 'search' OR s.`brand` LIKE 'search') ORDER BY s.`available` DESC LIMIT 30;",
    srchAllProduct: "SELECT s.`id`, s.`sku`, s.`hsn`, s.`product`, s.`pcode`, s.`unit`,COALESCE(s.`price`, s.`mrp`, s.`wsp`) AS `price`, s.`gst`, s.`size`, NULL AS `disc`, s.`sold`, s.`available` AS `avl`, 1 AS qty, CASE WHEN s.`disc_type` = '%' THEN s.`discount` ELSE NULL END AS `disc_per`, CASE WHEN s.`disc_type` IS NULL THEN s.`discount` ELSE NULL END AS `disc_val`, NULL AS `emp_id`, s.`season`, s.`section`, s.`category`, s.`colour`, s.`ean`, s.`brand`, s.`image`, coalesce(s.`sold`, 0) AS `sold` FROM `viewstock` s WHERE (s.`product` LIKE 'search' OR s.`pcode` LIKE 'search' OR s.`sku` LIKE 'search' OR s.`hsn` LIKE 'search' OR s.`supplier` = 'search' OR s.`category` LIKE 'search' OR s.`section` LIKE 'search' OR s.`season` LIKE 'search' OR s.`ean` LIKE 'search' OR s.`colour` LIKE 'search' OR s.`brand` LIKE 'search') ORDER BY s.`available` DESC LIMIT 30;",
    scanBarcode: "SELECT `id`, `sku`, `hsn`, `product`, `pcode`, `size`, `unit`, `mrp`, `price`, `discount`, `gst`, `available`, `brand`, `category`, `colour`, `disc_type`, `label`, `section`, `season`, `sold` FROM `viewstock` WHERE `sku` = ? OR `ean` = ?;",
    loadStockForSearch: "SELECT s.`id`, s.`sku`, s.`hsn`, s.`product`, s.`product` AS `original_name`, lcase(s.`product`) AS `product_lowercase`, s.`pcode`, lcase(s.`pcode`) AS `pcode_lowercase`, s.`unit`, s.`mrp`, s.`price`, s.`wsp`, s.`gst`, s.`size`, NULL AS `disc`, s.`sold`, s.`avl_qty` AS `avl`, 1 AS qty, CASE WHEN s.`disc_type` = '%' THEN s.`discount` ELSE NULL END AS `disc_per`, CASE WHEN s.`disc_type` IS NULL THEN s.`discount` ELSE NULL END AS `disc_val`, NULL AS `emp_id`, s.`season`, s.`section`, s.`category`, s.`colour`, s.`ean`, s.`brand`, s.`image`, coalesce(s.`sold`, 0) AS `sold` FROM `stock_view` s ORDER BY s.id ASC;",
    try: "SELECT id, sku, product, mrp, coalesce(pcode, '') AS pcode, coalesce(gst, '') AS gst, coalesce(unit, '') AS unit, coalesce(size, '') AS size, coalesce(hsn, '') AS hsn, coalesce(colour, '') AS colour, coalesce(season, '') AS season, coalesce(section, '') AS section, coalesce(category, '') AS category, coalesce(ean, '') AS ean, coalesce(brand, '') AS brand, NULL AS disc, case when disc_type= '%' then discount else null end AS disc_per, case when disc_type is null then discount else null end AS disc_val, null AS emp_id, image, avl_qty AS avl, sold FROM stock_view WHERE entity= 1 and ( product LIKE 'search' or pcode LIKE 'search' or sku LIKE 'search' or ean LIKE 'search' or brand LIKE 'search' ) order by id ASC limit 50;",
    insertsold: 'INSERT INTO `sold` (`order_id`,`sku`,`hsn`,`qty`,`product`,`pcode`,`size`,`unit`,`mrp`,`price`,`disc`,`gst`,`tax`,`net`,`gross`,`emp_id`,`disc_val`,`disc_per`,`entity`) VALUES',
    partyStats: "SELECT total, pymt, (COALESCE(total,0) - COALESCE(pymt,0)) dueamt, (SELECT alltotal FROM orders WHERE id = (SELECT MAX(id) FROM orders WHERE party = p.id)) AS latest_order_total FROM party p LEFT JOIN (SELECT party, SUM(alltotal) total FROM orders GROUP BY party) o ON o.party = p.id LEFT JOIN (SELECT party, SUM(amount) pymt FROM pymtfyear GROUP BY party) y ON y.party = p.id WHERE p.id = ?;",
    partyDetails: "SELECT p.*, total AS billing, pymt AS pymts, orders_cnt, ( (COALESCE(p.opening_bal, 0) + COALESCE(total, 0)) - COALESCE(pymt, 0)) AS balance, (SELECT alltotal FROM orders WHERE id = (SELECT MAX(id) FROM orders WHERE party = p.id)) AS latest_order_total FROM party p LEFT JOIN (SELECT party, SUM(alltotal) total, count(party) AS orders_cnt FROM orders GROUP BY party) o ON o.party = p.id LEFT JOIN (SELECT party, SUM(amount) pymt FROM pymtfyear GROUP BY party) y ON y.party = p.id WHERE p.id = ?;",
    partyRewards: "SELECT SUM(IFNULL(rewards, 0) - IFNULL(redeem, 0)) AS `total_rewards` FROM `orders` WHERE `party` = ? GROUP BY `party`;",
    partyRwds: "SELECT SUM(IFNULL(rewards, 0) - IFNULL(redeem, 0)) AS `rwds` FROM `orders` WHERE `party` = ? GROUP BY `party`;",
    addeditparty: "UPDATE orders SET party = ? WHERE id = ?;",
    entity: "SELECT `id`, `entity_id`, `entity_name`, `entity_type`, `tag_line`, `reg_num`, `pan_num`, `gst_num`, `reg_since`, `contact`, `email`, `website`, `address`, `city`, `pincode`, `state`, `state_code`, `status` FROM `entity`;",
    editEntity: "SELECT * FROM entity WHERE status = true;",
    firstAndLastOrderId: "SELECT MIN(`id`) AS `first_id`,  MAX(`id`) AS `last_id` FROM `orders`;",
    empbyid: "SELECT id, emp_name AS `name`, emp_id, contact, exprience, education, gender, date_format(`birthday`, '%d/%m/%Y') AS birthday, date_format(`joining`, '%d/%m/%Y') AS joned_on, bg AS blood_group, deg AS designation, ecd AS Emeg_contact, address, hometown AS home_town, father, mother, ref AS reference, department, salary, lwd, status FROM employee WHERE id = ?;",
    shipAddress: "SELECT * FROM address WHERE party = ?;",
    editShipping: "SELECT * FROM address WHERE id = ?;",
    localUsers: "SELECT `id`, `name` as value FROM `users` WHERE `user_role` = 'user';",
    discounts: "SELECT * FROM discounts;",
    delDisc: "DELETE FROM discounts WHERE id = ? AND id > 6;",
    delPymtmethod: "DELETE FROM pymt_methods WHERE id = ? AND id > 7;",
    recent_order: "SELECT id, DATE_FORMAT(order_date, '%d/%m/%Y') AS dated, alltotal AS total FROM orders ORDER BY id DESC LIMIT 10;",
    unpaid_orders: "SELECT o.id, DATE_FORMAT(o.order_date, '%d/%m') AS dated, p.party_name AS party, o.alltotal AS amount FROM orders o LEFT JOIN party p ON p.id = o.party LEFT JOIN pymtfyear y ON o.id = y.order_id WHERE y.order_id IS NULL;",
    quick_closing: "SELECT o.id, p.party_name AS party, o.alltotal AS total FROM orders o LEFT JOIN party p ON p.id = o.party WHERE o.order_date = CURDATE();",
    month_sales: "SELECT DATE_FORMAT(order_date, '%d/%m/%Y') AS dated, SUM(alltotal) AS sale FROM orders WHERE MONTH(order_date) = MONTH(NOW()) AND YEAR(order_date) = YEAR(NOW()) GROUP BY order_date ORDER BY order_date desc;",
    sales_comprasion: "SELECT DAY(order_date) AS `dated`, SUM(CASE WHEN order_date >= DATE_FORMAT(CURDATE(), '%Y-%m-01') THEN alltotal ELSE 0 END) AS current_month_sales, SUM(CASE WHEN order_date >= DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH, '%Y-%m-01') AND order_date < DATE_FORMAT(CURDATE(), '%Y-%m-01') THEN alltotal ELSE 0 END) AS last_month_sales FROM orders GROUP BY `dated` ORDER BY `dated`;",
    sales_lastmonth: "SELECT DATE_FORMAT(order_date, '%d/%m/%Y') AS dated, DATE_FORMAT(order_date, '%d') AS date, SUM(alltotal) AS sale FROM orders WHERE MONTH(order_date) = (MONTH(NOW()) -1) GROUP BY order_date ORDER BY order_date DESC;",
    view_holds: "SELECT h.`id`, p.`party_name` AS `party`, DATE_FORMAT(h.`date`, '%d/%m/%Y') AS `dated` FROM `hold` h JOIN `party` p ON p.`id` = h.`party` ORDER BY h.id DESC;",
    hold_byid: "SELECT *, DATE_FORMAT(`date`, '%Y-%m-%d') AS `order_date` FROM hold WHERE id = ?;",
    holditems_byid: "SELECT * FROM holditems WHERE hold_id = ?;",
    monthly_sales: "SELECT MONTH(order_date) AS mnth, SUM(alltotal) sales FROM orders WHERE fin_year = CASE WHEN MONTH(NOW())>3 THEN YEAR(NOW())+1 ELSE YEAR(NOW()) END GROUP BY MONTH(order_date), fin_year;",
    fy_sales: "SELECT fin_year AS fyear, SUM(alltotal) sale FROM orders GROUP BY fin_year;",
    firstshalf_month: "",
    fin_years: "SELECT fin_year FROM orders GROUP BY fin_year;",
    getpartyby_id: "SELECT p.`id`, p.`title`, p.`party_id`, p.`party_name`, p.`party_type`, p.`contact`, p.`email`, p.`company`, p.`gender`, p.`pan_num`, p.`gst_number`, p.`birthday`, p.`address`, p.`city`, p.`pincode`, p.`state`, p.`state_code`, p.`country`, p.`opening_bal` AS `opening`, p.`comments`, o.`cnt` AS `orders`, o.`billing`, o.`cnt` AS `orders`, o.`billing`, y.`pymt` AS `payments`, ( COALESCE(o.`billing`, 0) - COALESCE(y.`pymt`, 0) ) + COALESCE(p.`opening_bal`, 0) AS `balance` FROM `party` p LEFT JOIN ( SELECT count(`party`) `cnt`, sum(`alltotal`) `billing`, `party` FROM `orders` GROUP BY `party` ) o ON o.`party` = p.`id` LEFT JOIN ( SELECT x.`party`, sum(x.`amount`) `pymt` FROM `pymtfyear` x INNER JOIN `party` p ON x.`party` = p.id WHERE p.`party_type` <> 'supplier' GROUP BY x.`party` ) y ON y.`party` = p.id WHERE p.`id` = ? ORDER BY p.`id` ASC;",
    getpartyby_maxid: "SELECT p.`id`, p.`party_name`, p.`party_type`, p.`title`, p.`contact`, p.`email`, p.`company`, p.`gender`, p.`pan_num`, p.`gst_number`, p.`birthday`, p.`address`, p.`city`, p.`pincode`, p.`state`, p.`state_code`, p.`country`, p.`opening_bal` AS `opening`, p.`comments`, o.`cnt` AS `orders`, o.`billing`, o.`cnt` AS `orders`, o.`billing`, y.`pymt` AS `payments`, ( COALESCE(o.`billing`, 0) - COALESCE(y.`pymt`, 0) ) + COALESCE(p.`opening_bal`, 0) AS `balance` FROM `party` p LEFT JOIN ( SELECT count(`party`) `cnt`, sum(`alltotal`) `billing`, `party` FROM `orders` GROUP BY `party` ) o ON o.`party` = p.`id` LEFT JOIN ( SELECT x.`party`, sum(x.`amount`) `pymt` FROM `pymtfyear` x INNER JOIN party p ON x.party = p.id WHERE p.party_type <> 'supplier' GROUP BY x.`party` ) y ON y.`party` = p.id WHERE p.`id` = (SELECT MAX(id) FROM party) ORDER BY p.`id` ASC;",
    getstock_byid: "SELECT `id`, `sku`, `product`, `pcode`, `mrp`, `price`, `wsp`, `gst`, `size`, `discount`, `disc_type`, `brand`, `colour`, `label`, `section`, `season`, `category`, `upc`, `hsn`, `unit`, `prchd_on`, `purch_id`, `bill_number`, `supid`, `supplier`, `ean`, COALESCE(`cost`, `purch_price`) AS `cost`, COALESCE(`purch_price`, `cost`) AS `purch_price`, `cost_gst`, `qty`, `sold`, `defect`, `returned`, `available`, `product` as `original_name` FROM `viewstock` WHERE id = ?;",
    getstockby_maxid: "SELECT `id`, `sku`, `product`, `pcode`, `mrp`, `price`, `wsp`, `gst`, `size`, `discount`, `disc_type`, `brand`, `colour`, `label`, `section`, `season`, `category`, `upc`, `hsn`, `unit`, `prchd_on`, `bill_number` as `prch_num`, `supid`, `supplier`, `ean`, `cost`, `qty`, `sold`, `defect`, `returned` as `gr`, `available` as `avl`, `product` as `original_name` FROM `viewstock` WHERE id = (SELECT MAX(id) FROM stock);",
    party_stacks: "SELECT party_name, party_id, p.opening_bal as opening, o.total as orders, y.pymts , COALESCE(p.opening_bal, 0) + COALESCE(o.total,0) - COALESCE(y.pymts) AS balance FROM party p LEFT JOIN(SELECT party, SUM(alltotal) as total FROM orders GROUP BY party) o ON o.party = p.id LEFT JOIN (SELECT party, SUM(amount) as pymts FROM pymtfyear GROUP BY party) y on y.party = p.id WHERE p.id = ?;",
    party_history: "SELECT id, DATE_FORMAT(order_date, '%d/%m/%Y') as dated, subtotal, discount as disc, freight, totaltax as tax, alltotal as total, y.payment FROM orders o LEFT JOIN (SELECT order_id, sum(amount) as payment FROM pymtfyear GROUP BY order_id) y ON y.order_id = o.id WHERE o.party = ? ORDER BY o.id DESC;",
    party_history_bydates: "SELECT id, DATE_FORMAT(order_date, '%d/%m/%Y') as dated, subtotal, discount as disc, freight, totaltax as tax, alltotal as total, y.payment FROM orders o LEFT JOIN(SELECT order_id, sum(amount) as payment FROM pymtfyear GROUP BY order_id) y ON y.order_id = o.id WHERE o.party = ? AND o.order_date BETWEEN ? AND ?;",
    emp_month_sales: "SELECT e.emp_name AS employee, SUM(s.gross) AS sales FROM sold s JOIN orders o ON s.order_id = o.id JOIN employee e ON s.emp_id = e.id WHERE MONTH(o.order_date) = MONTH(CURRENT_DATE()) AND YEAR(o.order_date) = YEAR(CURRENT_DATE()) GROUP BY e.id ORDER BY sales DESC;",
    srchsup: "SELECT id, party_name AS supplier, party_id AS sup_id, contact FORM party WHERE party_name LIKE 'search' AND party_type = 'supplier' ORDER BY id;",
    suppliers: "SELECT * FROM party WHERE party_type = 'supplier' ORDER BY id;",
    supById: "SELECT * FROM party WHERE party_type = 'supplier' AND id = (SELECT MAX(id) FROM party WHERE party_type = 'supplier');",
    srchPurchStock: "",
    delPurch: "DELETE FROM purchase WHERE id = ?;",
    stockbyPurchid: "SELECT `id`, `sku`, `product`, `pcode`, `mrp`, `price`, `wsp`, `gst`, `size`, `discount`, `disc_type`, `brand`, `colour`, `label`, `section`, `season`, `category`, `upc`, `hsn`, `unit`, `prchd_on`, `purch_id`, `bill_number`, `supid`, `supplier`, `ean`, COALESCE(`cost`, `purch_price`) AS `cost`, COALESCE(`purch_price`, `cost`) AS `purch_price`, `cost_gst`, `qty`, `sold`, `defect`, `returned`, `available`, `product` AS `original_name` FROM `viewstock` WHERE `purch_id` = ?;",
    // maxsku: "SELECT CAST(`sku` AS UNSIGNED) AS `sku` FROM `stock` WHERE id = (SELECT MAX(`id`) FROM `stock`);",
    maxsku: "SELECT MAX(id) + 1000 AS `sku` FROM `stock`;",
    insertStock: "INSERT INTO `stock`(`sku`,`ean`,`hsn`,`upc`,`pcode`,`product`,`mrp`,`price`,`wsp`,`gst`,`purch_price`,`cost`,`cost_gst`,`unit`,`size`,`qty`,`discount`,`disc_type`,`colour`,`season`,`section`,`category`,`label`,`brand`,`purch_id`,`temp_id`) VALUES ",
    purchOrders: "SELECT u.`id`, p.`party_name` as `supplier`, DATE_FORMAT(COALESCE(`bill_date`, `order_date`), '%d/%m/%Y') as `dated`, `order_number`, u.`quantity` as `qty`, `bill_type`, `bill_number`, `sub_total` as `subtotal`, `discount` as `disc`, `tax_amount` as `tax`, `freight`, `bill_amount` as `total`, y.`pymt`, `fin_year`, u.`notes`, `supid`, u.`timestamp` from `purchase` u LEFT JOIN `party` p on p.`id` = u.`supid` LEFT JOIN ( select `purch_id`, sum(`amount`) as `pymt` from `pymtfyear` group by `purch_id`) y on y.`purch_id` = u.`id` order by `id`;",
    updateIndexDBPurchase: "SELECT `id`, date_format(`dated`, '%d/%m/%Y') AS `dated`, `order_number`, `supplier`, `bill_type`, `bill_number`, `qty`, `subtotal`, `disc`, `tax`, `freight`, `total`, `pymt`, `total` - COALESCE(`pymt`, 0) AS `balance`, `fyear`, `supid`, `bdate` FROM ( SELECT u.`id`, u.`order_number`, COALESCE(u.`bill_date`, u.`order_date`) AS `dated`, p.`party_name` AS `supplier`, u.`supid`, u.`bill_type`, u.`bill_number`, u.`quantity` AS `qty`, u.`sub_total` AS `subtotal`, u.`discount` AS `disc`, u.`tax_amount` AS `tax`, u.`freight`, u.`bill_amount` AS `total`, y.`pymt`, u.`fin_year` AS `fyear`, u.`ref_filename`, COALESCE(u.`bill_date`, u.`order_date`) AS `bdate` FROM `purchase` u LEFT JOIN `party` p ON p.id = u.`supid` LEFT JOIN ( SELECT `purch_id`, sum(`amount`) AS `pymt` FROM `pymtfyear` WHERE `pymt_for` = 'purchase' GROUP BY `purch_id` ) y ON y.`purch_id` = u.`id` WHERE u.`id` = ? ) stk;",
    editPurch: "SELECT `id` as `edit_id`, DATE_FORMAT(`order_date`, '%Y-%m-%d') AS `order_date`, `supid` as `sup_id`, date_format(`bill_date`, '%Y-%m-%d') AS `bill_date`, `bill_number`, `discount` AS `disc_val`, (`discount`/`sub_total`) * 100 AS `disc`, ROUND((`discount`/`sub_total`) * 100) AS `disc_per`, `bill_type` AS `order_type`, `order_number` as `tmp_id`, `notes`, COALESCE(`gst_roundoff`, 0) as `round` FROM `purchase` WHERE `id` = ?;",
    purchasedStock: "SELECT `id`, `product`, `pcode`, `size`, `unit`, `qty`, `cost`, `cost_gst`, `price`, `gst`, `wsp`, `mrp`, `discount`, `disc_type`, `brand`, `section`, `season`, `category`, `colour`, `upc`, `label`, `hsn`, `ean`, `purch_price`, `purch_id`  FROM `stock` WHERE `purch_id` = ?;",
    purchPymt: "SELECT `id`, `cash`, `bank`, `other`, `amount`, `bank_id`, `bank_mode`, `pymt_method`, `pymt_date`, `purch_id`, `notes` FROM `payments` WHERE `purch_id` = ?;",
    setDelStock: "UPDATE `stock` SET `purch_id` = null WHERE id = ?;",
    setDiscTypeValue: "UPDATE `discounts` SET `disc_type` = '#' WHERE `id` = ?;",
    setDiscTypePercent: "UPDATE `discounts` SET `disc_type` = '%' WHERE `id` = ?;",
    ordersByID: "SELECT o.`id`, DATE_FORMAT(o.`order_date`, '%d/%m/%Y') AS `dated`, p.`party_name` AS `party`, o.`party` as `pid`, p.`party_id`, o.`inv_number` AS `inv_num`, o.`order_type` AS `type`, o.`subtotal`, o.`discount` AS `disc`, o.`totaltax` AS `tax`, o.`freight`, o.`alltotal` `total`, py.`pymt`, o.`adjustment` `adj`, o.`alltotal` - (COALESCE(py.`pymt`,0) + COALESCE(o.`adjustment`,0)) AS `balance`, o.`fin_year` AS `fyear`, MONTH(o.`order_date`) AS `month`, u.`username` AS `biller`, o.`order_id` FROM `orders` o LEFT JOIN `party` p ON o.`party` = p.`id` LEFT JOIN ( SELECT sum(`amount`) `pymt`, `order_id` FROM `payments` GROUP BY `order_id` ) py ON o.`id` = py.`order_id` LEFT JOIN `users` u ON o.`user_id` = u.`id` WHERE o.id = ?;",
    editOrder: "SELECT `id` AS `edit_id`, DATE_FORMAT(`order_date`, '%Y-%m-%d') AS order_date, `order_type`, `inv_number` AS `order_number`, `party`, `subtotal`, `discount`, `freight`, `round_off`, `totaltax` as `tax`, `alltotal` AS `total`, `tax_type` AS `taxType`, `manual_tax`, `discount`, `disc_id`, `disc_percent`, `category`, `location` FROM `orders` WHERE `id` = ?;",
    editOrderItems: "SELECT `id`, `sku`, `hsn`, `pcode`, `product`, `size`, `qty`, `unit`, `price`, `disc`, `emp_id` FROM sold WHERE order_id = ?;",
    editOrderPymts: "SELECT `id`, `cash`, `bank`, `other`, `amount`, `bank_id`, `bank_mode`, `pymt_method`, `notes` FROM `pymtfyear` WHERE `order_id` = ? AND `pymt_date` = ?;",
    updateIndexdbOrder: "SELECT o.`id`, DATE_FORMAT(o.`order_date`, '%d/%m/%Y') AS `dated`, DATE_FORMAT(o.`order_date`, '%Y-%m-%d') AS `order_date`, p.`party_name`, o.`party`, p.`party_id`, o.`inv_number`, o.`order_type`, qs.`qty_sold` AS `qty`, o.`subtotal`, o.`discount`, o.`totaltax` AS `tax`, o.`freight`, o.`alltotal` AS `total`, o.`manual_tax`, py.`pymt`, o.`adjustment`, o.`round_off`, o.`alltotal` - ( COALESCE(py.`pymt`, 0) + COALESCE(o.`adjustment`, 0) ) AS `balance`, o.`fin_year`, o.`category`, o.`location`, o.`disc_id`, o.`disc_percent`, o.`rewards`, o.`redeem`, o.`notes`, o.`ship_id`, o.`tax_type`, o.`gst_type`, o.`previous_due`, MONTH(o.`order_date`) AS `month`, YEAR(o.`order_date`) AS `year`, u.`username` AS `biller`, o.`order_id`, o.`timestamp`, p.`email` FROM `orders` o LEFT JOIN `party` p ON o.`party` = p.`id` LEFT JOIN ( SELECT `order_id`, SUM(`qty`) as `qty_sold` FROM `sold` GROUP BY `order_id` ) qs ON qs.`order_id` = o.`id` LEFT JOIN ( SELECT sum(`amount`) `pymt`, `order_id` FROM `payments` GROUP BY `order_id` ) py ON o.`id` = py.`order_id` LEFT JOIN `users` u ON o.`user_id` = u.`id` where o.`id` = ? ORDER BY o.`order_date` DESC, o.`id` DESC;",
    updateIndexdbSolds: "select l.`id`, date_format(o.`order_date`, '%d/%m/%Y') as `dated`, l.`order_id`, o.`inv_number`, p.`party_name`, l.`sku`, coalesce(l.`hsn`, s.`hsn`) as `hsn`, coalesce(l.`category`, s.`category`) as `category`, l.`pcode`, l.`product`, l.`size`, l.`unit`, l.`qty`, l.`price`, l.`disc`, l.`disc_val`, l.`disc_per`, l.`gst`, l.`tax`, l.`net`, l.`gross`, l.`emp_id`, e.`emp_name` from `sold` l left join `orders` o on l.`order_id` = o.`id` left join `party` p on o.`party` = p.`id` left join `stock` s on l.`sku` = s.`sku` left join `employee` e on e.`id` = l.`emp_id` where o.`id` = ?;",
    updateIndexdbPymts: "select y.`id`, date_format(y.`pymt_date`, '%d/%m/%Y') as `dated`, date_format(y.`pymt_date`, '%Y-%m-%d') as `pymt_date`, p.`party_name`, p.`id` as `party`, y.`amount`, y.`cash`, y.`bank`, y.`other`, y.`bank_id`, y.`bank_mode`, y.`pymt_method`, y.`payment_method`, y.`bank_name`, y.`adjustment` AS `forefiet`, y.`order_id`, y.`purch_id`, y.`pymt_for`, y.`notes` from `pymtfyear` y left join `party` p on p.`id` = y.`party` where y.`order_id`=?;",
    delsolditem: "DELETE FROM `sold` WHERE `id` = ?;",
    delPymtByOrderid: "DELETE FROM payments WHERE order_id = ? AND (pymt_date IS NULL OR pymt_date = ?);",
    pymtByPurchid: "select y.`id`, date_format(y.`pymt_date`, '%d/%m/%Y') as `dated`, date_format(y.`pymt_date`, '%Y-%m-%d') as `pymt_date`, p.`party_name`, p.`id` as `party`, y.`amount`, y.`cash`, y.`bank`, y.`other`, y.`bank_id`, y.`bank_mode`, y.`pymt_method`, y.`payment_method`, y.`bank_name`, y.`adjustment` AS `forefiet`, y.`order_id`, y.`purch_id`, y.`pymt_for`, y.`notes` from `pymtfyear` y left join `party` p on p.`id` = y.`party` where y.`purch_id` = ?;",
    delParty: "DELETE p FROM `party` p LEFT JOIN `orders` o ON o.`party` = p.id LEFT JOIN `payments` y ON y.`party` = p.id WHERE o.id IS NULL AND y.id IS NULL AND p.id = ?;",
    getpartyByid: "SELECT p.`id`, p.`title`, p.`party_id`, p.`party_name`, p.`party_type`, p.`contact`, p.`email`, p.`company`, p.`gender`, p.`pan_num`, p.`gst_number`, p.`birthday`, p.`address`, p.`city`, p.`pincode`, p.`state`, p.`state_code`, p.`country`, p.`opening_bal` AS `opening`, p.`comments`, o.`cnt` AS `orders`, o.`billing`, y.`payments`,( COALESCE(o.`billing`, 0) - COALESCE(y.`payments`, 0)) + COALESCE(p.`opening_bal`, 0) AS `balance` FROM `party` p LEFT JOIN ( SELECT count(`party`) `cnt`, sum(`alltotal`) `billing`, `party` FROM `orders` GROUP BY `party` ) o ON o.`party` = p.`id` LEFT JOIN ( SELECT x.`party`, sum(x.`amount`) `payments` FROM `pymtfyear` x INNER JOIN `party` p ON x.`party` = p.`id` WHERE p.`party_type` <> 'supplier' GROUP BY x.`party` ) y ON y.`party` = p.id WHERE p.`party_type` <> 'supplier' AND p.id = ?; ",
    stockView: "CREATE OR REPLACE VIEW `viewstock` AS SELECT s.*, DATE_FORMAT( COALESCE(u.`bill_date`, u.`order_date`), '%d/%m/%Y' ) AS `prchd_on`, u.`bill_number`, u.`supid`, p.`party_name` as `supplier`, l.`sold`, r.`returned`, ds.`defect`, ( s.`qty` - COALESCE(r.`returned`, 0) - COALESCE(l.`sold`, 0) ) AS `available` FROM `stock` s LEFT JOIN `purchase` u ON u.`id` = s.`purch_id` LEFT JOIN `party` p ON p.`id` = u.`supid` LEFT JOIN ( SELECT `sku`, SUM(`qty`) AS `sold` FROM `sold` GROUP BY `sku` ) l ON l.`sku` = s.`sku` LEFT JOIN ( SELECT `sku`, SUM(`qty`) AS `returned` FROM `stockreturn` GROUP BY `sku` ) r ON r.`sku` = s.`sku` LEFT JOIN ( SELECT `sku`, SUM(`qty`) as `defect` FROM `defective_stock` WHERE `dnote_id` IS NULL GROUP BY `sku` ) ds on ds.`sku` = s.`sku` ORDER BY s.`id` ASC;",
    purchItems: "SELECT `hsn`, `pcode`, `product`, `size`, `price`, `unit`, `qty`, `disc`, `gst` FROM `sold` WHERE `order_id` = ?;",


}

module.exports = queries = {
    ...addOnQueries,
    partyById: "SELECT * FROM party WHERE id = ?;",
    editExpense: `SELECT * FROM expense WHERE id =?;`,
    editNote: "SELECT * FROM `notes` WHERE `id` = ?;",
    viewNotes: "SELECT n.`id`, coalesce(f.folder, '') AS folder, n.`details`, n.`status`, date_format(n.`timestamp`, '%d-%m-%Y, %r') `timestamp` FROM `notes`n left JOIN folders f ON f.id = n.folder_id order by n.`id` desc;",
    briefOrderDetails: "SELECT o.`id`, o.`timestamp` AS `time`, SUBSTRING(p.`party_name`, 1,10) `party`, o.`inv_number` `inv#`, o.`alltotal` `total`, o.`discount` `disc`, o.`freight`, (IFNULL(o.`manual_tax`,0) + IFNULL(o.`totaltax`, 0)) AS `tax` FROM `orders` o LEFT JOIN `party` p ON p.`id` = o.`party` WHERE o.`order_date`= ?;",
    thermalItems: "SELECT `product`, `size`, `unit`, COALESCE(`price`, `mrp`) as `price`, SUM(`qty`) `qty`, SUM(`disc`) `disc`, SUM(`tax`) `tax`, `gst`, SUM(`gross`) `amount`, coalesce(`disc_val`, CONCAT(`disc_per`, '%'),'') `disc_type` FROM `sold` WHERE `order_id` = ? group by `product`, `size`, `unit`, `mrp`, `price`, `gst`, `disc_val`, `disc_per`;",
    viewOrderItemSql: "SELECT l.`sku`, s.`pcode`, coalesce(l.`hsn`, s.`hsn`) `hsn`, l.`product`, l.`qty`, coalesce(l.`size`, s.`size`) `size`, coalesce(l.`unit`, s.`unit`) `unit`, COALESCE(l.`price`, l.`mrp`) as `price`, l.`disc`, l.`gst`, l.`tax`, l.`net`, l.`gross` AS `total` FROM `sold` l left JOIN `stock` s ON s.`sku` = l.`sku` WHERE l.`order_id`= ?;",
    viewEntity: `SELECT * FROM entity WHERE id=?;`,
    viewGS: `SELECT SUM(qty) gs FROM sold WHERE qty > 0 and order_id =?;`,
    viewGR: `SELECT SUM(qty) gr FROM sold WHERE qty < 0 and order_id =?;`,
    defaultBank: `SELECT * FROM bank WHERE id = (SELECT default_bank FROM settings WHERE entity = 1);`,
    orderItems: "SELECT l.`sku`, s.`pcode`, coalesce(l.`hsn`,s.`hsn`) `hsn`, l.`product`, SUM(l.`qty`) AS `qty`, coalesce(l.`size`, s.`size`) `size`, coalesce(l.`unit`, s.`unit`) `unit`, COALESCE(l.`price`, l.`mrp`) AS `price`, SUM(l.`disc`) AS `disc`, l.`gst`, SUM(l.`tax`) AS `tax`, SUM(l.`net`) AS `net`, SUM(l.`gross`) AS `total` FROM `sold` l left JOIN `stock` s ON s.`sku` = l.`sku` WHERE l.`order_id`= ? group by l.`sku`, s.`pcode`, l.`hsn`, s.`hsn`, l.`product`, l.`qty`, l.`size`, s.`size`, l.`unit`, s.`unit`, l.`mrp`, l.price, l.`disc`, l.`gst`, l.`tax`,l.`net`, l.`gross`;",
    partyDueBalByorderId: "SELECT p.opening_bal, y.pymt, o.total, co.cot, cp.cpymt, (o.total - co.cot) + ifnull(p.opening_bal,0) + ifnull(cp.cpymt, 0) - (ifnull(y.pymt,0) + ifnull(y.adj,0)) AS current_due FROM party p left JOIN (SELECT party, SUM(amount) pymt, SUM(adjustment) adj FROM payments WHERE pymt_for = 'sales' group by party) y ON y.party = p.id left JOIN (SELECT party, SUM(alltotal) total FROM orders group by party) o ON o.party = p.id left JOIN (SELECT party, alltotal AS cot FROM orders WHERE id = ?) co ON co.party = p.id left JOIN (SELECT party, SUM(amount) AS cpymt FROM payments WHERE order_id = ? group by party) cp ON cp.party = p.id WHERE p.id = (SELECT party FROM orders WHERE id = ?);",
    settings: `SELECT * FROM settings WHERE entity = 1;`,
    thermal: "SELECT `product`, `size`, `unit`, COALESCE(`price`, `mrp`) as `price`, SUM(`qty`) `qty`, SUM(`disc`) `disc`, SUM(`tax`) `tax`, `gst`, SUM(`gross`) `amount`, `disc_val`, `disc_per`, coalesce(`disc_val`, CONCAT(`disc_per`, '%'),'') `disc_type` FROM `sold` WHERE `order_id` = ? group by `product`, `mrp`, `price`, `size`, `unit`, `gst`, `disc_val`, `disc_per`;",
    fysales: "SELECT SUM(alltotal) AS sale FROM orders WHERE fin_year = ?",

}